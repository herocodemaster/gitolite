#!/bin/sh
# postinst script for gitolite
# Copyright 2010-2011 by Gerfried Fuchs <rhonda@debian.org>
# Licenced under WTFPLv2

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Source debconf library.
if [ -e /usr/share/debconf/confmodule ]; then
	. /usr/share/debconf/confmodule
fi

action=$1
version=$2
if [ "${DEBCONF_RECONFIGURE}" = "1" ]; then
	# workaround until reconfigure is really available
	action=reconfigure
fi

# New install or upgrade from old version
if dpkg --compare-versions "$version" lt "1:2.3-ossxp-12"; then
    # Do not add default prefix [SCM] in notify email, as mailing list alway provides one.
    git config --system hooks.emailprefix ""
    # max lines in email.
    git config --system hooks.emailmaxlines 200
    # Disable warning if email_notify not set.
    git config --system hooks.emailunsetwarn false
fi

# only on new install or reconfigure
if [ "x$version" = "x" ] || [ "$action" = "reconfigure" ]; then

	db_get gitolite/gituser
	GITUSER="${RET:-git}"

	db_get gitolite/gitdir
	GITDIR="${RET:-/var/lib/gitolite}"

	db_get gitolite/adminkey
	ADMINKEY="$RET"
	# set it back to empty after use
	db_set gitolite/adminkey ""


	# all this makes only sense when we have been given an admin key
	# to initialize with
	if [ -n "$ADMINKEY" ]; then

		if ! getent group "$GITUSER" >/dev/null; then
			addgroup --quiet --system --gid 512 "$GITUSER" || \
			addgroup --quiet --system "$GITUSER"
		fi
		if ! getent passwd "$GITUSER" >/dev/null; then
			adduser --quiet --uid 512 \
				--system --home "$GITDIR" --shell /bin/bash \
				--no-create-home --gecos 'git repository hosting' \
				--ingroup "$GITUSER" "$GITUSER" || \
			adduser --quiet --system --home "$GITDIR" --shell /bin/bash \
				--no-create-home --gecos 'git repository hosting' \
				--ingroup "$GITUSER" "$GITUSER"
		fi

		# $GITUSER can access ssh services
		SSHGROUP=$(grep -i "^AllowGroup" /etc/ssh/sshd_config | awk '{print $2;}')
		if [ -n "$SSHGROUP" ]; then
			adduser "$GITUSER" "$SSHGROUP"
		fi

		# Gitweb: Apache user www-data can access repositories
		adduser www-data "$GITUSER"

		if [ ! -r "$GITDIR/.gitolite.rc" ]; then
			if [ ! -d "$GITDIR" ]; then
				mkdir -p "$GITDIR"
				chown "$GITUSER":"$GITUSER" "$GITDIR"
			fi

			# create admin repository
			tmpdir="$(mktemp -d)"
			if [ -r "$ADMINKEY" ]; then
				# key file
				cat "$ADMINKEY" > "$tmpdir/admin.pub"
			else
				# possibly pasted key
				echo "$ADMINKEY" > "$tmpdir/admin.pub"
			fi
			chown -R "$GITUSER" "$tmpdir"
			su -c "gl-setup -q '$tmpdir/admin.pub'" "$GITUSER"
			rm -r "$tmpdir"

		else
			echo "gitolite seems to be already set up in $GITDIR, doing nothing." 1>&2
		fi

		# Create sandbox directory to hold deleted repositories
		mkdir -p $GITDIR/repositories-sandbox
		chown "$GITUSER":"$GITUSER" $GITDIR/repositories-sandbox
		chmod 770 $GITDIR/repositories-sandbox

		# Add adc-bin, which link to /usr/share/...
		if [ ! -e "$GITDIR/adc-bin" ]; then
			ln -s /usr/share/doc/gitolite/examples/adc $GITDIR/adc-bin
		fi

		# Set owner, group for /var/www/gitolite
		chown -R "$GITUSER"."$GITUSER" /var/www/gitolite

	else
		echo "No adminkey given - not setting up gitolite." 1>&2
	fi

fi

if dpkg --compare-versions "$2" lt-nl "1:2.3-ossxp-17"; then
    /opt/ossxp/bin/ossxp_pkgadmin.py --yes change
fi

# update RC file
db_get gitolite/gitdir
GITDIR="${RET:-/var/lib/gitolite}"
RCFILE=$GITDIR/.gitolite.rc
if [ -n "$GITDIR" ] && [ -e $RCFILE ]; then

    if ! grep -q "GL_REPO_CREATE_BY_CLONE" $RCFILE; then
        sed --in-place -e '/^\$REPO_BASE=/ {
a \

a \
# ------------------------------------------------------------------------------
a \
# Wild repo can be created by clone or by push. If set $GL_REPO_CREATE_BY_CLONE
a \
# to 1, create new repo by clone, or by push. Create by clone is convenient but
a \
# may create lots of unwanted repos by  trash repo by accident.
a \
$GL_REPO_CREATE_BY_CLONE = 0;
            }' $RCFILE
    fi

    if ! grep -q "GL_EMAIL_ALIKE_PUBKEY_MAPUSER" $RCFILE; then
        sed --in-place -e '/^\$GL_REPO_CREATE_BY_CLONE/ {
a \

a \
# ------------------------------------------------------------------------------
a \
# set to 1, email alike pubkey, like baz@example.com.pub will map to baz.
a \
$GL_EMAIL_ALIKE_PUBKEY_MAPUSER = 1;
            }' $RCFILE
    fi
fi

#DEBHELPER#

exit 0
